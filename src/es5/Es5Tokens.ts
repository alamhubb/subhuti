import {createKeywordToken, createToken, SubhutiCreateTokenGroupType} from "../subhuti/struct/SubhutiCreateToken";
import JsonUtil from "../utils/JsonUtil";

export enum Es6TokenName {
    num = 'num',
    regexp = 'regexp',
    string = 'string',
    Identifier = 'Identifier',
    privateId = 'privateId',
    eof = 'eof',
    LBracket = 'LBracket',
    RBracket = 'RBracket',
    braceL = 'braceL',
    braceR = 'braceR',
    parenL = 'parenL',
    parenR = 'parenR',
    comma = 'comma',
    semi = 'semi',
    colon = 'colon',
    dot = 'dot',
    question = 'question',
    questionDot = 'questionDot',
    arrow = 'arrow',
    template = 'template',
    invalidTemplate = 'invalidTemplate',
    ellipsis = 'ellipsis',
    backQuote = 'backQuote',
    dollarBraceL = 'dollarBraceL',
    eq = 'eq',
    assign = 'assign',
    incDec = 'incDec',
    prefix = 'prefix',
    logicalOR = 'logicalOR',
    logicalAND = 'logicalAND',
    bitwiseOR = 'bitwiseOR',
    bitwiseXOR = 'bitwiseXOR',
    bitwiseAND = 'bitwiseAND',
    equality = 'equality',
    relational = 'relational',
    bitShift = 'bitShift',
    plusMin = 'plusMin',
    modulo = 'modulo',
    star = 'star',
    slash = 'slash',
    starstar = 'starstar',
    coalesce = 'coalesce',
    break = 'break',
    case = 'case',
    catch = 'catch',
    continue = 'continue',
    debugger = 'debugger',
    default = 'default',
    do = 'do',
    else = 'else',
    finally = 'finally',
    for = 'for',
    function = 'function',
    if = 'if',
    return = 'return',
    switch = 'switch',
    throw = 'throw',
    try = 'try',
    var = 'var',
    const = 'const',
    while = 'while',
    with = 'with',
    new = 'new',
    this = 'this',
    super = 'super',
    class = 'class',
    extends = 'extends',
    export = 'export',
    import = 'import',
    null = 'null',
    true = 'true',
    false = 'false',
    in = 'in',
    instanceof = 'instanceof',
    typeof = 'typeof',
    void = 'void',
    delete = 'delete',
}

export const es6TokenObj = {
    // 数字
    Num: createToken({name: Es6TokenName.num, pattern: /0|[1-9]\d*/}),
    // 正则表达式
    Regexp: createToken({name: Es6TokenName.regexp, pattern: /\/([^\/\\]|\\.)*\/[gimsuy]*/}),
    // 字符串
    String: createToken({name: Es6TokenName.string, pattern: /"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'/}),
    // 名称（标识符）
    Identifier: createToken({name: Es6TokenName.Identifier, pattern: /[a-zA-Z$_][\w$]*/}),
    // 私有标识符
    PrivateId: createToken({name: Es6TokenName.privateId, pattern: /#[a-zA-Z$_][\w$]*/}),
    // 文件结束
    Eof: createToken({name: Es6TokenName.eof, pattern: /$/}),
    // 括号和标点符号
    LBracket: createToken({name: Es6TokenName.LBracket, pattern: /\[/}),
    RBracket: createToken({name: Es6TokenName.RBracket, pattern: /]/}),
    BraceL: createToken({name: Es6TokenName.braceL, pattern: /\{/}),
    BraceR: createToken({name: Es6TokenName.braceR, pattern: /}/}),
    ParenL: createToken({name: Es6TokenName.parenL, pattern: /\(/}),
    ParenR: createToken({name: Es6TokenName.parenR, pattern: /\)/}),
    Comma: createToken({name: Es6TokenName.comma, pattern: /,/}),
    Semi: createToken({name: Es6TokenName.semi, pattern: /;/}),
    Colon: createToken({name: Es6TokenName.colon, pattern: /:/}),
    Dot: createToken({name: Es6TokenName.dot, pattern: /\./}),
    Question: createToken({name: Es6TokenName.question, pattern: /\?/}),
    QuestionDot: createToken({name: Es6TokenName.questionDot, pattern: /\?\./}),
    Arrow: createToken({name: Es6TokenName.arrow, pattern: /=>/}),
    Template: createToken({name: Es6TokenName.template, pattern: /`(?:[^`\\]|\\.)*`/}),
    InvalidTemplate: createToken({name: Es6TokenName.invalidTemplate, pattern: /`(?:[^`\\]|\\.)*$/}),
    Ellipsis: createToken({name: Es6TokenName.ellipsis, pattern: /\.\.\./}),
    BackQuote: createToken({name: Es6TokenName.backQuote, pattern: /`/}),
    DollarBraceL: createToken({name: Es6TokenName.dollarBraceL, pattern: /\$\{/}),
    // 运算符
    Eq: createToken({name: Es6TokenName.eq, pattern: /=/}),
    Assign: createToken({name: Es6TokenName.assign, pattern: /:=/}),
    IncDec: createToken({name: Es6TokenName.incDec, pattern: /\+\+|--/}),
    Prefix: createToken({name: Es6TokenName.prefix, pattern: /[+-~!]/}),
    LogicalOR: createToken({name: Es6TokenName.logicalOR, pattern: /\|\|/}),
    LogicalAND: createToken({name: Es6TokenName.logicalAND, pattern: /&&/}),
    BitwiseOR: createToken({name: Es6TokenName.bitwiseOR, pattern: /\|/}),
    BitwiseXOR: createToken({name: Es6TokenName.bitwiseXOR, pattern: /\^/}),
    BitwiseAND: createToken({name: Es6TokenName.bitwiseAND, pattern: /&/}),
    Equality: createToken({name: Es6TokenName.equality, pattern: /==|!=|===|!==/}),
    Relational: createToken({name: Es6TokenName.relational, pattern: /<|>|<=|>=/}),
    BitShift: createToken({name: Es6TokenName.bitShift, pattern: /<<|>>|>>>/}),
    PlusMin: createToken({name: Es6TokenName.plusMin, pattern: /[+\-]/}),
    Modulo: createToken({name: Es6TokenName.modulo, pattern: /%/}),
    Star: createToken({name: Es6TokenName.star, pattern: /\*/}),
    Slash: createToken({name: Es6TokenName.slash, pattern: /\//}),
    Starstar: createToken({name: Es6TokenName.starstar, pattern: /\*\*/}),
    Coalesce: createToken({name: Es6TokenName.coalesce, pattern: /\?\?/}),
    // 关键字
    BreakToken: createKeywordToken({name: Es6TokenName.break, pattern: /break/}),
    CaseToken: createKeywordToken({name: Es6TokenName.case, pattern: /case/}),
    CatchToken: createKeywordToken({name: Es6TokenName.catch, pattern: /catch/}),
    ContinueToken: createKeywordToken({name: Es6TokenName.continue, pattern: /continue/}),
    DebuggerToken: createKeywordToken({name: Es6TokenName.debugger, pattern: /debugger/}),
    DefaultToken: createKeywordToken({name: Es6TokenName.default, pattern: /default/}),
    DoToken: createKeywordToken({name: Es6TokenName.do, pattern: /do/}),
    ElseToken: createKeywordToken({name: Es6TokenName.else, pattern: /else/}),
    FinallyToken: createKeywordToken({name: Es6TokenName.finally, pattern: /finally/}),
    ForToken: createKeywordToken({name: Es6TokenName.for, pattern: /for/}),
    FunctionToken: createKeywordToken({name: Es6TokenName.function, pattern: /function/}),
    IfToken: createKeywordToken({name: Es6TokenName.if, pattern: /if/}),
    ReturnToken: createKeywordToken({name: Es6TokenName.return, pattern: /return/}),
    SwitchToken: createKeywordToken({name: Es6TokenName.switch, pattern: /switch/}),
    ThrowToken: createKeywordToken({name: Es6TokenName.throw, pattern: /throw/}),
    TryToken: createKeywordToken({name: Es6TokenName.try, pattern: /try/}),
    VarToken: createKeywordToken({name: Es6TokenName.var, pattern: /var/}),
    ConstToken: createKeywordToken({name: Es6TokenName.const, pattern: /const/}),
    WhileToken: createKeywordToken({
        name: Es6TokenName.while,
        pattern: /while/,
        group: SubhutiCreateTokenGroupType.skip
    }),
    WithToken: createKeywordToken({name: Es6TokenName.with, pattern: /with/}),
    NewToken: createKeywordToken({name: Es6TokenName.new, pattern: /new/}),
    ThisToken: createKeywordToken({name: Es6TokenName.this, pattern: /this/}),
    SuperToken: createKeywordToken({name: Es6TokenName.super, pattern: /super/}),
    ClassToken: createKeywordToken({name: Es6TokenName.class, pattern: /class/}),
    ExtendsToken: createKeywordToken({name: Es6TokenName.extends, pattern: /extends/}),
    ExportToken: createKeywordToken({name: Es6TokenName.export, pattern: /export/}),
    ImportToken: createKeywordToken({name: Es6TokenName.import, pattern: /import/}),
    NullToken: createKeywordToken({name: Es6TokenName.null, pattern: /null/}),
    TrueToken: createKeywordToken({name: Es6TokenName.true, pattern: /true/}),
    FalseToken: createKeywordToken({name: Es6TokenName.false, pattern: /false/}),
    InToken: createKeywordToken({name: Es6TokenName.in, pattern: /in/}),
    InstanceofToken: createKeywordToken({name: Es6TokenName.instanceof, pattern: /instanceof/}),
    TypeofToken: createKeywordToken({name: Es6TokenName.typeof, pattern: /typeof/}),
    VoidToken: createKeywordToken({name: Es6TokenName.void, pattern: /void/}),
    DeleteToken: createKeywordToken({name: Es6TokenName.delete, pattern: /delete/}),
};
