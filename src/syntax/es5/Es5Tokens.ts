import {
    createKeywordToken,
    createStringToken,
    createToken,
    SubhutiCreateTokenGroupType
} from "../../subhuti/struct/SubhutiCreateToken";
import {Es6TokenName} from "../es6/old/Es6Tokens";

export const Es5TokensName = {
    // Keywords
    VarTok: 'VarTok',
    BreakTok: 'BreakTok',
    DoTok: 'DoTok',
    InstanceOfTok: 'InstanceOfTok',
    TypeofTok: 'TypeofTok',
    CaseTok: 'CaseTok',
    ElseTok: 'ElseTok',
    NewTok: 'NewTok',
    CatchTok: 'CatchTok',
    FinallyTok: 'FinallyTok',
    ReturnTok: 'ReturnTok',
    VoidTok: 'VoidTok',
    ContinueTok: 'ContinueTok',
    ForTok: 'ForTok',
    SwitchTok: 'SwitchTok',
    WhileTok: 'WhileTok',
    DebuggerTok: 'DebuggerTok',
    FunctionTok: 'FunctionTok',
    ThisTok: 'ThisTok',
    WithTok: 'WithTok',
    DefaultTok: 'DefaultTok',
    IfTok: 'IfTok',
    ThrowTok: 'ThrowTok',
    DeleteTok: 'DeleteTok',
    InTok: 'InTok',
    TryTok: 'TryTok',
    SuperTok: 'SuperTok',
    NullLiteral: 'NullLiteral',
    TrueTok: 'TrueTok',
    FalseTok: 'FalseTok',
    // Identifiers
    IdentifierName: 'IdentifierName',
    SetTok: 'SetTok',
    GetTok: 'GetTok',
    // Punctuators
    LBrace: 'LBrace',
    RBrace: 'RBrace',
    LParen: 'LParen',
    RParen: 'RParen',
    LBracket: 'LBracket',
    RBracket: 'RBracket',
    Dot: 'Dot',
    Semicolon: 'Semicolon',
    Comma: 'Comma',
    // Operators
    PlusPlus: 'PlusPlus',
    MinusMinus: 'MinusMinus',
    Ampersand: 'Ampersand',
    VerticalBar: 'VerticalBar',
    Circumflex: 'Circumflex',
    Exclamation: 'Exclamation',
    Tilde: 'Tilde',
    AmpersandAmpersand: 'AmpersandAmpersand',
    VerticalBarVerticalBar: 'VerticalBarVerticalBar',
    Question: 'Question',
    Colon: 'Colon',
    Asterisk: 'Asterisk',
    Slash: 'Slash',
    Percent: 'Percent',
    Plus: 'Plus',
    Minus: 'Minus',
    LessLess: 'LessLess',
    MoreMore: 'MoreMore',
    MoreMoreMore: 'MoreMoreMore',
    Less: 'Less',
    More: 'More',
    LessEq: 'LessEq',
    MoreEq: 'MoreEq',
    EqEq: 'EqEq',
    NotEq: 'NotEq',
    EqEqEq: 'EqEqEq',
    NotEqEq: 'NotEqEq',
    Eq: 'Eq',
    PlusEq: 'PlusEq',
    MinusEq: 'MinusEq',
    AsteriskEq: 'AsteriskEq',
    PercentEq: 'PercentEq',
    LessLessEq: 'LessLessEq',
    MoreMoreEq: 'MoreMoreEq',
    MoreMoreMoreEq: 'MoreMoreMoreEq',
    AmpersandEq: 'AmpersandEq',
    VerticalBarEq: 'VerticalBarEq',
    CircumflexEq: 'CircumflexEq',
    SlashEq: 'SlashEq',
    // Literals
    NumericLiteral: 'NumericLiteral',
    StringLiteral: 'StringLiteral',
    RegularExpressionLiteral: 'RegularExpressionLiteral',
    Whitespace: 'Whitespace'
};
export const es5TokensObj = {
    // Keywords
    VarTok: createKeywordToken(Es5TokensName.VarTok, "var"),
    BreakTok: createKeywordToken(Es5TokensName.BreakTok, "break"),
    DoTok: createKeywordToken(Es5TokensName.DoTok, "do"),
    InstanceOfTok: createKeywordToken(Es5TokensName.InstanceOfTok, "instanceof"),
    TypeofTok: createKeywordToken(Es5TokensName.TypeofTok, "typeof"),
    CaseTok: createKeywordToken(Es5TokensName.CaseTok, "case"),
    ElseTok: createKeywordToken(Es5TokensName.ElseTok, "else"),
    NewTok: createKeywordToken(Es5TokensName.NewTok, "new"),
    CatchTok: createKeywordToken(Es5TokensName.CatchTok, "catch"),
    FinallyTok: createKeywordToken(Es5TokensName.FinallyTok, "finally"),
    ReturnTok: createKeywordToken(Es5TokensName.ReturnTok, "return"),
    VoidTok: createKeywordToken(Es5TokensName.VoidTok, "void"),
    ContinueTok: createKeywordToken(Es5TokensName.ContinueTok, "continue"),
    ForTok: createKeywordToken(Es5TokensName.ForTok, "for"),
    SwitchTok: createKeywordToken(Es5TokensName.SwitchTok, "switch"),
    WhileTok: createKeywordToken(Es5TokensName.WhileTok, "while"),
    DebuggerTok: createKeywordToken(Es5TokensName.DebuggerTok, "debugger"),
    FunctionTok: createKeywordToken(Es5TokensName.FunctionTok, "function"),
    ThisTok: createKeywordToken(Es5TokensName.ThisTok, "this"),
    WithTok: createKeywordToken(Es5TokensName.WithTok, "with"),
    DefaultTok: createKeywordToken(Es5TokensName.DefaultTok, "default"),
    IfTok: createKeywordToken(Es5TokensName.IfTok, "if"),
    ThrowTok: createKeywordToken(Es5TokensName.ThrowTok, "throw"),
    DeleteTok: createKeywordToken(Es5TokensName.DeleteTok, "delete"),
    InTok: createKeywordToken(Es5TokensName.InTok, "in"),
    TryTok: createKeywordToken(Es5TokensName.TryTok, "try"),
    SuperTok: createKeywordToken(Es5TokensName.SuperTok, "super"),
    NullLiteral: createKeywordToken(Es5TokensName.NullLiteral, "null"),
    TrueTok: createKeywordToken(Es5TokensName.TrueTok, "true"),
    FalseTok: createKeywordToken(Es5TokensName.FalseTok, "false"),
    SetTok: createKeywordToken(Es5TokensName.SetTok, "set"),
    GetTok: createKeywordToken(Es5TokensName.GetTok, "get"),

    // Punctuators
    LBrace: createStringToken(Es5TokensName.LBrace,"{"),
    RBrace: createStringToken(Es5TokensName.RBrace,"}"),
    LParen: createStringToken(Es5TokensName.LParen,"("),
    RParen: createStringToken(Es5TokensName.RParen,")"),
    LBracket: createStringToken(Es5TokensName.LBracket,"["),
    RBracket: createStringToken(Es5TokensName.RBracket,"]"),
    Dot: createStringToken(Es5TokensName.Dot,"."),
    Semicolon: createStringToken(Es5TokensName.Semicolon,";"),
    Comma: createStringToken(Es5TokensName.Comma,","),
    // Operators
    PlusPlus: createStringToken(Es5TokensName.PlusPlus,"++"),
    MinusMinus: createStringToken(Es5TokensName.MinusMinus,"--"),
    Ampersand: createStringToken(Es5TokensName.Ampersand,"&"),
    VerticalBar: createStringToken(Es5TokensName.VerticalBar,"|"),
    Circumflex: createStringToken(Es5TokensName.Circumflex,"^"),
    Exclamation: createStringToken(Es5TokensName.Exclamation,"!"),
    Tilde: createStringToken(Es5TokensName.Tilde,"~"),
    AmpersandAmpersand: createStringToken(Es5TokensName.AmpersandAmpersand,"&&"),
    VerticalBarVerticalBar: createStringToken(Es5TokensName.VerticalBarVerticalBar,"||"),
    Question: createStringToken(Es5TokensName.Question,"?"),
    Colon: createStringToken(Es5TokensName.Colon,":"),
    Asterisk: createStringToken(Es5TokensName.Asterisk,"*"),
    Slash: createStringToken(Es5TokensName.Slash,"//"),
    Percent: createStringToken(Es5TokensName.Percent,"%"),
    Plus: createStringToken(Es5TokensName.Plus,"+"),
    Minus: createStringToken(Es5TokensName.Minus,"-"),
    LessLess: createStringToken(Es5TokensName.LessLess,"<<"),
    MoreMore: createStringToken(Es5TokensName.MoreMore,">>"),
    MoreMoreMore: createStringToken(Es5TokensName.MoreMoreMore,">>>"),
    Less: createStringToken(Es5TokensName.Less,"<"),
    More: createStringToken(Es5TokensName.More,">"),
    LessEq: createStringToken(Es5TokensName.LessEq,"<="),
    MoreEq: createStringToken(Es5TokensName.MoreEq,">="),
    EqEq: createStringToken(Es5TokensName.EqEq,"=="),
    NotEq: createStringToken(Es5TokensName.NotEq,"!="),
    EqEqEq: createStringToken(Es5TokensName.EqEqEq,"==="),
    NotEqEq: createStringToken(Es5TokensName.NotEqEq,"!=="),
    Eq: createStringToken(Es5TokensName.Eq,"="),
    PlusEq: createStringToken(Es5TokensName.PlusEq,"+="),
    MinusEq: createStringToken(Es5TokensName.MinusEq,"-="),
    AsteriskEq: createStringToken(Es5TokensName.AsteriskEq,"*="),
    PercentEq: createStringToken(Es5TokensName.PercentEq,"%="),
    LessLessEq: createStringToken(Es5TokensName.LessLessEq,"<<="),
    MoreMoreEq: createStringToken(Es5TokensName.MoreMoreEq,">>="),
    MoreMoreMoreEq: createStringToken(Es5TokensName.MoreMoreMoreEq,">>>="),
    AmpersandEq: createStringToken(Es5TokensName.AmpersandEq,"&="),
    VerticalBarEq: createStringToken(Es5TokensName.VerticalBarEq,"|="),
    CircumflexEq: createStringToken(Es5TokensName.CircumflexEq,"^="),
    SlashEq: createStringToken(Es5TokensName.SlashEq,"/="),

    // Identifiers
    // Literals
    IdentifierName: createToken({name: Es5TokensName.IdentifierName, pattern: /[A-Za-z_$][A-Za-z0-9_$]*/}),
    NumericLiteral: createToken({name: Es5TokensName.NumericLiteral, pattern: /-?\d+(\.\d+)?/}),
    StringLiteral: createToken({name: Es5TokensName.StringLiteral, pattern: /(["'])((?:\\\1|(?:(?!\1|\n|\r).)*)*)\1/}),
    RegularExpressionLiteral: createToken({
        name: Es5TokensName.RegularExpressionLiteral,
        pattern: /\/(?:\\.|[^\\\/])+\/[gimuy]*/
    }),
    Whitespace: createToken({
        name: Es5TokensName.Whitespace,
        pattern: /\s+/,
        group: SubhutiCreateTokenGroupType.skip
    }),
};
export const es5Tokens = Object.values(es5TokensObj);
