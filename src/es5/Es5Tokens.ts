import {createKeywordToken, createToken} from "../subhuti/struct/SubhutiCreateToken";

const Es6TokenName = {
    // Keywords
    VarTok: 'VarTok',
    BreakTok: 'BreakTok',
    DoTok: 'DoTok',
    InstanceOfTok: 'InstanceOfTok',
    TypeOfTok: 'TypeOfTok',
    CaseTok: 'CaseTok',
    ElseTok: 'ElseTok',
    NewTok: 'NewTok',
    CatchTok: 'CatchTok',
    FinallyTok: 'FinallyTok',
    ReturnTok: 'ReturnTok',
    VoidTok: 'VoidTok',
    ContinueTok: 'ContinueTok',
    ForTok: 'ForTok',
    SwitchTok: 'SwitchTok',
    WhileTok: 'WhileTok',
    DebuggerTok: 'DebuggerTok',
    FunctionTok: 'FunctionTok',
    ThisTok: 'ThisTok',
    WithTok: 'WithTok',
    DefaultTok: 'DefaultTok',
    IfTok: 'IfTok',
    ThrowTok: 'ThrowTok',
    DeleteTok: 'DeleteTok',
    InTok: 'InTok',
    TryTok: 'TryTok',
    SuperTok: 'SuperTok',
    NullTok: 'NullTok',
    TrueTok: 'TrueTok',
    FalseTok: 'FalseTok',

    // Identifiers
    Identifier: 'Identifier',
    SetTok: 'SetTok',
    GetTok: 'GetTok',

    // Punctuators
    LCurly: 'LCurly',
    RCurly: 'RCurly',
    LParen: 'LParen',
    RParen: 'RParen',
    LBracket: 'LBracket',
    RBracket: 'RBracket',
    Dot: 'Dot',
    Semicolon: 'Semicolon',
    Comma: 'Comma',

    // Operators
    PlusPlus: 'PlusPlus',
    MinusMinus: 'MinusMinus',
    Ampersand: 'Ampersand',
    VerticalBar: 'VerticalBar',
    Circumflex: 'Circumflex',
    Exclamation: 'Exclamation',
    Tilde: 'Tilde',
    AmpersandAmpersand: 'AmpersandAmpersand',
    VerticalBarVerticalBar: 'VerticalBarVerticalBar',
    Question: 'Question',
    Colon: 'Colon',
    Asterisk: 'Asterisk',
    Slash: 'Slash',
    Percent: 'Percent',
    Plus: 'Plus',
    Minus: 'Minus',
    LessLess: 'LessLess',
    MoreMore: 'MoreMore',
    MoreMoreMore: 'MoreMoreMore',
    Less: 'Less',
    Greater: 'Greater',
    LessEq: 'LessEq',
    GreaterEq: 'GreaterEq',
    EqEq: 'EqEq',
    NotEq: 'NotEq',
    EqEqEq: 'EqEqEq',
    NotEqEq: 'NotEqEq',
    Eq: 'Eq',
    PlusEq: 'PlusEq',
    MinusEq: 'MinusEq',
    AsteriskEq: 'AsteriskEq',
    PercentEq: 'PercentEq',
    LessLessEq: 'LessLessEq',
    MoreMoreEq: 'MoreMoreEq',
    MoreMoreMoreEq: 'MoreMoreMoreEq',
    AmpersandEq: 'AmpersandEq',
    VerticalBarEq: 'VerticalBarEq',
    CircumflexEq: 'CircumflexEq',
    SlashEq: 'SlashEq',

    // Literals
    NumericLiteral: 'NumericLiteral',
    StringLiteral: 'StringLiteral',
    RegularExpressionLiteral: 'RegularExpressionLiteral'
};

export const es6TokObj = {
    // Keywords
    VarTok: createKeywordToken({ name: Es6TokenName.VarTok, pattern: /^var$/ }),
    BreakTok: createKeywordToken({ name: Es6TokenName.BreakTok, pattern: /^break$/ }),
    DoTok: createKeywordToken({ name: Es6TokenName.DoTok, pattern: /^do$/ }),
    InstanceOfTok: createKeywordToken({ name: Es6TokenName.InstanceOfTok, pattern: /^instanceof$/ }),
    TypeOfTok: createKeywordToken({ name: Es6TokenName.TypeOfTok, pattern: /^typeof$/ }),
    CaseTok: createKeywordToken({ name: Es6TokenName.CaseTok, pattern: /^case$/ }),
    ElseTok: createKeywordToken({ name: Es6TokenName.ElseTok, pattern: /^else$/ }),
    NewTok: createKeywordToken({ name: Es6TokenName.NewTok, pattern: /^new$/ }),
    CatchTok: createKeywordToken({ name: Es6TokenName.CatchTok, pattern: /^catch$/ }),
    FinallyTok: createKeywordToken({ name: Es6TokenName.FinallyTok, pattern: /^finally$/ }),
    ReturnTok: createKeywordToken({ name: Es6TokenName.ReturnTok, pattern: /^return$/ }),
    VoidTok: createKeywordToken({ name: Es6TokenName.VoidTok, pattern: /^void$/ }),
    ContinueTok: createKeywordToken({ name: Es6TokenName.ContinueTok, pattern: /^continue$/ }),
    ForTok: createKeywordToken({ name: Es6TokenName.ForTok, pattern: /^for$/ }),
    SwitchTok: createKeywordToken({ name: Es6TokenName.SwitchTok, pattern: /^switch$/ }),
    WhileTok: createKeywordToken({ name: Es6TokenName.WhileTok, pattern: /^while$/ }),
    DebuggerTok: createKeywordToken({ name: Es6TokenName.DebuggerTok, pattern: /^debugger$/ }),
    FunctionTok: createKeywordToken({ name: Es6TokenName.FunctionTok, pattern: /^function$/ }),
    ThisTok: createKeywordToken({ name: Es6TokenName.ThisTok, pattern: /^this$/ }),
    WithTok: createKeywordToken({ name: Es6TokenName.WithTok, pattern: /^with$/ }),
    DefaultTok: createKeywordToken({ name: Es6TokenName.DefaultTok, pattern: /^default$/ }),
    IfTok: createKeywordToken({ name: Es6TokenName.IfTok, pattern: /^if$/ }),
    ThrowTok: createKeywordToken({ name: Es6TokenName.ThrowTok, pattern: /^throw$/ }),
    DeleteTok: createKeywordToken({ name: Es6TokenName.DeleteTok, pattern: /^delete$/ }),
    InTok: createKeywordToken({ name: Es6TokenName.InTok, pattern: /^in$/ }),
    TryTok: createKeywordToken({ name: Es6TokenName.TryTok, pattern: /^try$/ }),
    SuperTok: createKeywordToken({ name: Es6TokenName.SuperTok, pattern: /^super$/ }),
    NullTok: createKeywordToken({ name: Es6TokenName.NullTok, pattern: /^null$/ }),
    TrueTok: createKeywordToken({ name: Es6TokenName.TrueTok, pattern: /^true$/ }),
    FalseTok: createKeywordToken({ name: Es6TokenName.FalseTok, pattern: /^false$/ }),

    // Identifiers
    Identifier: createToken({ name: Es6TokenName.Identifier, pattern: /^[A-Za-z_$][A-Za-z0-9_$]*$/ }),
    SetTok: createKeywordToken({ name: Es6TokenName.SetTok, pattern: /^set$/ }),
    GetTok: createKeywordToken({ name: Es6TokenName.GetTok, pattern: /^get$/ }),

    // Punctuators
    LCurly: createToken({ name: Es6TokenName.LCurly, pattern: /^\{$/ }),
    RCurly: createToken({ name: Es6TokenName.RCurly, pattern: /^\}$/ }),
    LParen: createToken({ name: Es6TokenName.LParen, pattern: /^\($/ }),
    RParen: createToken({ name: Es6TokenName.RParen, pattern: /^\)$/ }),
    LBracket: createToken({ name: Es6TokenName.LBracket, pattern: /^\[$/ }),
    RBracket: createToken({ name: Es6TokenName.RBracket, pattern: /^\]$/ }),
    Dot: createToken({ name: Es6TokenName.Dot, pattern: /^\.$/ }),
    Semicolon: createToken({ name: Es6TokenName.Semicolon, pattern: /^;$/ }),
    Comma: createToken({ name: Es6TokenName.Comma, pattern: /^,$/ }),

    // Operators
    PlusPlus: createToken({ name: Es6TokenName.PlusPlus, pattern: /^\+\+$/ }),
    MinusMinus: createToken({ name: Es6TokenName.MinusMinus, pattern: /^--$/ }),
    Ampersand: createToken({ name: Es6TokenName.Ampersand, pattern: /^&$/ }),
    VerticalBar: createToken({ name: Es6TokenName.VerticalBar, pattern: /^\|$/ }),
    Circumflex: createToken({ name: Es6TokenName.Circumflex, pattern: /^\^$/ }),
    Exclamation: createToken({ name: Es6TokenName.Exclamation, pattern: /^!$/ }),
    Tilde: createToken({ name: Es6TokenName.Tilde, pattern: /^~$/ }),
    AmpersandAmpersand: createToken({ name: Es6TokenName.AmpersandAmpersand, pattern: /^&&$/ }),
    VerticalBarVerticalBar: createToken({ name: Es6TokenName.VerticalBarVerticalBar, pattern: /^\|\|$/ }),
    Question: createToken({ name: Es6TokenName.Question, pattern: /^\?$/ }),
    Colon: createToken({ name: Es6TokenName.Colon, pattern: /^:$/ }),
    Asterisk: createToken({ name: Es6TokenName.Asterisk, pattern: /^\*$/ }),
    Slash: createToken({ name: Es6TokenName.Slash, pattern: /^\/\/$/ }),
    Percent: createToken({ name: Es6TokenName.Percent, pattern: /^%$/ }),
    Plus: createToken({ name: Es6TokenName.Plus, pattern: /^\+$/ }),
    Minus: createToken({ name: Es6TokenName.Minus, pattern: /^-$/ }),
    LessLess: createToken({ name: Es6TokenName.LessLess, pattern: /^<<$/ }),
    MoreMore: createToken({ name: Es6TokenName.MoreMore, pattern: /^>>$/ }),
    MoreMoreMore: createToken({ name: Es6TokenName.MoreMoreMore, pattern: /^>>>$/ }),
    Less: createToken({ name: Es6TokenName.Less, pattern: /^<$/ }),
    Greater: createToken({ name: Es6TokenName.Greater, pattern: /^>$/ }),
    LessEq: createToken({ name: Es6TokenName.LessEq, pattern: /^<=$/ }),
    GreaterEq: createToken({ name: Es6TokenName.GreaterEq, pattern: /^>=$/ }),
    EqEq: createToken({ name: Es6TokenName.EqEq, pattern: /^==$/ }),
    NotEq: createToken({ name: Es6TokenName.NotEq, pattern: /^!=$/ }),
    EqEqEq: createToken({ name: Es6TokenName.EqEqEq, pattern: /^===$/ }),
    NotEqEq: createToken({ name: Es6TokenName.NotEqEq, pattern: /^!==$/ }),
    Eq: createToken({ name: Es6TokenName.Eq, pattern: /^=$/ }),
    PlusEq: createToken({ name: Es6TokenName.PlusEq, pattern: /^\+=$/ }),
    MinusEq: createToken({ name: Es6TokenName.MinusEq, pattern: /^-=$/ }),
    AsteriskEq: createToken({ name: Es6TokenName.AsteriskEq, pattern: /^\*=$/ }),
    PercentEq: createToken({ name: Es6TokenName.PercentEq, pattern: /^%=$/ }),
    LessLessEq: createToken({ name: Es6TokenName.LessLessEq, pattern: /^<<=$/ }),
    MoreMoreEq: createToken({ name: Es6TokenName.MoreMoreEq, pattern: /^>>=$/ }),
    MoreMoreMoreEq: createToken({ name: Es6TokenName.MoreMoreMoreEq, pattern: /^>>>=$/ }),
    AmpersandEq: createToken({ name: Es6TokenName.AmpersandEq, pattern: /^&=$/ }),
    VerticalBarEq: createToken({ name: Es6TokenName.VerticalBarEq, pattern: /^\|=$/ }),
    CircumflexEq: createToken({ name: Es6TokenName.CircumflexEq, pattern: /^\^=$/ }),
    SlashEq: createToken({ name: Es6TokenName.SlashEq, pattern: /^\/=$/ }),

    // Literals
    NumericLiteral: createToken({ name: Es6TokenName.NumericLiteral, pattern: /^-?\d+(\.\d+)?$/ }),
    StringLiteral: createToken({ name: Es6TokenName.StringLiteral, pattern: /^(['"])(?:\\.|[^\\])*?\1$/ }),
    RegularExpressionLiteral: createToken({
        name: Es6TokenName.RegularExpressionLiteral,
        pattern: /^\/(?:\\.|[^\\\/])+\/[gimuy]*$/
    })
};
